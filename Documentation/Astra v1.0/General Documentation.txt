The foundation of this project is built upon the Crafting Interpreters book, an excellent introduction to Interpreter Development.

Following the first release of the Astra Programming Language, the Cosmos Build and Package Manager will be released.
Until then, the only program needed to compile and run Astra programs is the language program itself.

In order to compile an Astra program, this command needs to be executed: "Astra {file_path} -r".
While compiling to bytecode and outputting a low-level bytecode file is internally supported, this will not be available until further releases.

The Astra compiler goes through the three following steps:
- Firstly it scans through the source code and analyzes the text, outputting corresponding tokens.
- The second phase consists of parsing the outputted tokens and emitting custom instructions for the specialized Astra Virtual Machine (AVM).
  General compilation is finished in this step and a .ml (Machine Language) file can be outputted. (This will be supported soon)
- The third and final step is the interpretation of the custom instructions by the Astra Virtual Machine.

Code generated by the compiler can be ran on any machine that has an AVM implementation.
Compiling to a native executable program will be supported in the near future, but an according C++ compiler will be needed for that.